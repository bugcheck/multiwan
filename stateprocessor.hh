// -*- c-basic-offset: 4 -*-
#ifndef CLICK_STATEPROCESSOR_HH
#define CLICK_STATEPROCESSOR_HH
#include <click/element.hh>
#include <click/glue.hh>
#include "progswitch.hh"
#include "connectionstate.hh"
CLICK_DECLS

#define CLICK_STATEPROCESSOR_DEBUG

/*
  =c

  StateProcessor(PROGSWITCH)

  =s local

  Takes a packet generated by StateSource and changes ProgSwitch accordingly

  =d

  Takes the packet generated by StateSource and after processes it
  changes ProgSwitch's mappings accordingly. The id for each internet
  connection in the StateSource packet is assumed to be be the output
  port number of ProgSwitch.

  NOTE: The headers must be stripped off before the packet enters this
  element.

  Keyword arguments:

  =item PROGSWITCH

  The ProgSwitch this element changes.

   =item OUTFILE

   String. Only available at user level. PrintV<> information to the
   file specified by OUTFILE instead of standard error.

 */

class StateProcessor : public Element { public:

    StateProcessor();
    ~StateProcessor();

    const char *class_name() const { return "StateProcessor"; }
    const char *port_count() const { return PORTS_1_0; }
    const char *processing() const { return PUSH; }

    int configure_phase() const { return ProgSwitch::CONFIGURE_PHASE + 1; }
    int configure(Vector<String> &, ErrorHandler *);
    int initialize(ErrorHandler *);
    void cleanup(CleanupStage);

    void push(int, Packet *);

private:

    typedef struct IDWeight {
	uint32_t id;
	double weight;

	IDWeight(uint32_t a, double b) {
	    id = a;
	    weight = b;
	}

 	bool operator<(const IDWeight& a) {
	    return weight > a.weight; // want things to be from greatest to least
	}
    };

    ProgSwitch *_progswitch;
    String _outfilename;
    FILE *_outfile;

    bool compare_idweight(IDWeight, IDWeight);
};

CLICK_ENDDECLS
#endif
